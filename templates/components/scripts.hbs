<!-- Highlight.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/x86asm.min.js"></script>

<!-- Live reload script (dev only) -->
<script>
    // Only connect to WebSocket in development (when running on localhost:3000)
    if (window.location.hostname === 'localhost' && window.location.port === '3000') {
        (function() {
            const ws = new WebSocket('ws://localhost:3000');
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.type === 'reload') {
                    window.location.reload();
                }
            };
            ws.onclose = function() {
                // Reconnect after 1 second if connection is lost
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            };
        })();
    }
</script>

<!-- Common interactive scripts -->
<script>
    // Mobile menu functionality
    function initMobileMenu() {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const mobileMenuClose = document.getElementById('mobile-menu-close');

        if (mobileMenuButton && mobileMenu && mobileMenuClose) {
            mobileMenuButton.addEventListener('click', () => {
                const expanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
                mobileMenuButton.setAttribute('aria-expanded', String(!expanded));
                mobileMenu.classList.toggle('hidden');
                mobileMenu.setAttribute('aria-hidden', mobileMenu.classList.contains('hidden'));
            });

            mobileMenuClose.addEventListener('click', () => {
                mobileMenu.classList.add('hidden');
                mobileMenuButton.setAttribute('aria-expanded', 'false');
            });

            // Close menu when clicking outside
            mobileMenu.addEventListener('click', (e) => {
                if (e.target === mobileMenu) {
                    mobileMenu.classList.add('hidden');
                    mobileMenu.setAttribute('aria-hidden', 'true');
                    mobileMenuButton.setAttribute('aria-expanded', 'false');
                }
            });
        }
    }

    // Theme management
    function initializeTheme() {
        const savedTheme = localStorage.getItem('theme');
        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        const theme = savedTheme || systemTheme;
        
        if (theme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
    }

    function toggleTheme() {
        const isDark = document.documentElement.classList.contains('dark');
        const newTheme = isDark ? 'light' : 'dark';
        
        // Show transition overlay
        const overlay = document.getElementById('theme-transition');
        if (overlay) {
            overlay.classList.add('active');
        }
        
        setTimeout(() => {
            if (newTheme === 'dark') {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
            localStorage.setItem('theme', newTheme);
            
            if (overlay) {
                setTimeout(() => {
                    overlay.classList.remove('active');
                }, 100);
            }
        }, 100);
    }

    // Tag scroll indicators functionality
    function initTagScrollIndicators() {
        const containers = document.querySelectorAll('#tags-container, .tags-container');

        containers.forEach(container => {
            const scrollLeft = container.parentElement.querySelector('#tags-scroll-left, .tags-scroll-left');
            const scrollRight = container.parentElement.querySelector('#tags-scroll-right, .tags-scroll-right');

            if (!scrollLeft || !scrollRight) return;

            let isDragging = false;
            let startX = 0;
            let scrollLeftStart = 0;

            function updateIndicators() {
                const scrollLeftValue = container.scrollLeft;
                const scrollWidth = container.scrollWidth;
                const clientWidth = container.clientWidth;
                const maxScroll = scrollWidth - clientWidth;

                // Only show indicators if content actually overflows
                const hasOverflow = scrollWidth > clientWidth;

                if (!hasOverflow) {
                    // No overflow - hide all indicators
                    scrollLeft.style.opacity = '0';
                    scrollRight.style.opacity = '0';
                    return;
                }

                // Update scroll indicators
                scrollLeft.style.opacity = scrollLeftValue > 5 ? '1' : '0';
                scrollRight.style.opacity = scrollLeftValue < (maxScroll - 5) ? '1' : '0';
            }

            // Click functionality for scroll indicators
            function scrollTagsLeft(button) {
                const container = button.parentElement.querySelector('.tags-container');
                if (container) {
                    container.scrollBy({ left: -120, behavior: 'smooth' });
                }
            }

            function scrollTagsRight(button) {
                const container = button.parentElement.querySelector('.tags-container');
                if (container) {
                    container.scrollBy({ left: 120, behavior: 'smooth' });
                }
            }

            // Make functions globally available
            window.scrollTagsLeft = scrollTagsLeft;
            window.scrollTagsRight = scrollTagsRight;

            // Mouse drag functionality for desktop
            container.addEventListener('mousedown', (e) => {
                isDragging = true;
                startX = e.pageX - container.offsetLeft;
                scrollLeftStart = container.scrollLeft;
                container.style.cursor = 'grabbing';
                container.style.userSelect = 'none';
                e.preventDefault();
            });

            container.addEventListener('mousemove', (e) => {
                if (!isDragging) return;
                e.preventDefault();
                const x = e.pageX - container.offsetLeft;
                const walk = (x - startX) * 2; // Scroll speed multiplier
                container.scrollLeft = scrollLeftStart - walk;
            });

            container.addEventListener('mouseup', () => {
                isDragging = false;
                container.style.cursor = 'grab';
                container.style.userSelect = '';
            });

            container.addEventListener('mouseleave', () => {
                isDragging = false;
                container.style.cursor = 'grab';
                container.style.userSelect = '';
            });

            // Set initial cursor
            container.style.cursor = 'grab';

            // Initial check
            updateIndicators();

            // Update on scroll
            container.addEventListener('scroll', updateIndicators);

            // Update on resize
            window.addEventListener('resize', updateIndicators);
        });
    }

    // Terminal OS detection
    function initTerminal() {
        const terminal = document.getElementById('terminal');
        if (!terminal) return;

        const ua = navigator.userAgent.toLowerCase();
        let os = 'linux'; // default
        
        if (ua.includes('mac')) os = 'mac';
        else if (ua.includes('win')) os = 'windows';
        
        terminal.classList.add(os);
    }

    // Initialize everything
    document.addEventListener('DOMContentLoaded', () => {
        initializeTheme();
        initMobileMenu();
        initTagScrollIndicators();
        initTerminal();
        
        // Theme toggle buttons
        const themeToggle = document.getElementById('theme-toggle');
        const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
        
        if (themeToggle) {
            themeToggle.addEventListener('click', toggleTheme);
        }
        
        if (mobileThemeToggle) {
            mobileThemeToggle.addEventListener('click', toggleTheme);
        }
    });
</script>
